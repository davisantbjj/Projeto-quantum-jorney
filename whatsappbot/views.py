from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from twilio.twiml.messaging_response import MessagingResponse
from .models import Userresponse
from google.oauth2.service_account import Credentials
from google.auth.transport.requests import Request
import google.generativeai as genai
import os
import time
import logging


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Carregando credenciais do Google
credentials = Credentials.from_service_account_file(
    "massive-seer-441900-k2-fa8a5fbbe892.json",
    scopes=["https://www.googleapis.com/auth/cloud-vertexai.models.use"],
)

# Verifica se as credenciais est√£o expiradas e, se necess√°rio, atualiza-as
if credentials.expired and credentials.refresh_token:
    credentials.refresh(Request())

# Configura√ß√£o da API Key do Google Gemini
GOOGLE_GEMINI_API_KEY = "AIzaSyANA2crWJuZUbfufZ5NlxTELYdDTpTOVgs"  # Recomenda-se usar vari√°veis de ambiente para maior seguran√ßa
if not GOOGLE_GEMINI_API_KEY:
    raise ValueError("A chave da API do Google Gemini n√£o foi configurada.")
genai.configure(api_key=GOOGLE_GEMINI_API_KEY)

# Lista de perguntas do question√°rio de anamnese
anamnese_questions = [
    {
        "question": "1. Qual o seu n√≠vel de ingl√™s? \n(a/b/c)\n"
        "a. Tenho pouco conhecimento da l√≠ngua (vocabul√°rio e gram√°tica) e n√£o falo nada. Socorro! üåü\n"
        "b. Tenho um bom conhecimento da l√≠ngua (vocabul√°rio e gram√°tica), mas falo com dificuldade. Preciso de ajuda! üôè\n"
        "c. Tenho um √≥timo conhecimento da l√≠ngua (vocabul√°rio e gram√°tica), mas n√£o pratico h√° um tempo. Me d√° uma forcinha! üí™",
        "valid_answers": ["a", "b", "c"],
    },
    {
        "question": "2. A sua experi√™ncia anterior com o aprendizado de idiomas foi: \n(a/b/c)\n"
        "a. Apenas em escolas; com m√∫sicas, filmes e s√©ries üé∂\n"
        "b. No trabalho üíº\n"
        "c. Em viagens ‚úàÔ∏è",
        "valid_answers": ["a", "b", "c"],
    },
    {
        "question": "3. O que te motivou a aprender ingl√™s? \n(a/b/c)\n"
        "a. Preciso aprender a me comunicar em qualquer situa√ß√£o do dia a dia üó£Ô∏è\n"
        "b. Preciso utilizar no meu trabalho üè¢\n"
        "c. Preciso para viajar üåç",
        "valid_answers": ["a", "b", "c"],
    },
    {
        "question": "4. Quanto tempo voc√™ pode dedicar ao estudo do ingl√™s por semana? \n(a/b/c)\n"
        "a. 01 vez na semana ‚Äì 01 hora por dia ‚è∞\n"
        "b. 02 vezes na semana ‚Äì 01 hora por dia ‚è∞\n"
        "c. Todos os dias ‚Äì 01 hora por dia ‚è∞",
        "valid_answers": ["a", "b", "c"],
    },
    {
        "question": "5. Quais m√©todos de aprendizagem voc√™ tentou no passado? \n(a/b/c/d)\n"
        "a. Estudo Autodidata\n"
        "b. Aulas Formais\n"
        "c. Imers√£o Cultural\n"
        "d. Conversa√ß√£o Pr√°tica\n",
        "valid_answers": ["a", "b", "c", "d"],
    },
    {
        "question": "6. Voc√™ tem alguma dificuldade espec√≠fica no aprendizado do ingl√™s? \n(a/b/c/d/e)\n"
        "a. Pron√∫ncia üó£Ô∏è\n"
        "b. Gram√°tica üìö\n"
        "c. Vocabul√°rio üìù\n"
        "d. Compreens√£o Auditiva üéß\n"
        "e. Confian√ßa na Conversa√ß√£o üí¨",
        "valid_answers": ["a", "b", "c", "d", "e"],
    },
]

# Dicion√°rios para rastrear progresso e registro
current_anamnese_index = {}
user_registration = {}


# Fun√ß√£o para gerar o plano de estudo personalizado
def gerar_plano_estudo_gemini(username, response):
    """
    Gera um plano de estudo detalhado e personalizado com base nas respostas do question√°rio.
    """
    prompt = f"""
    Crie um plano de estudo detalhado e personalizado para {username}, levando em considera√ß√£o as seguintes informa√ß√µes:
    * *N√≠vel:* {response[0]}
    * *Experi√™ncia:* {response[1]}
    * *Objetivo:* {response[2]}
    * *Tempo dispon√≠vel:* {response[3]}
    * *Dificuldades:* {response[5]}
    * *Prefer√™ncias:* {response[4]}
    use sempre esses dados que eu estou fornecendo.

    O plano deve incluir:
    * *Atividades di√°rias:* Sugest√µes de exerc√≠cios pr√°ticos, como leitura, escrita, escuta e fala.
    * *Estrat√©gia:* Dicas para otimizar o aprendizado, como t√©cnicas de memoriza√ß√£o e gest√£o do tempo.
    * *Progress√£o:* Como acompanhar o progresso e ajustar o plano ao longo do tempo.
    * "Parab√©ns, {username}! üéâ Seu plano de estudo est√° pronto! Baixe nosso app e acesse recursos exclusivos. üì≤

    Acesse: [http://quantum.jorney/app] üöÄ"

    O plano deve ser claro, conciso e motivacional, adaptando-se ao estilo de aprendizado individual de {username}
    o tamnho do texto n√£o pode ultrapassar as 500 caracteres.
    """
    try:

        model = genai.GenerativeModel("gemini-1.5-flash")
        config = genai.GenerationConfig(max_output_tokens=500, temperature=0.7)
        response = model.generate_content(prompt, generation_config=config)

        content = response.candidates[0].content

        logger.info(f"Resposta do modelo: {content.parts[0].text}")

        if isinstance(content, str):
            return content.strip()
        elif hasattr(content, "parts") and len(content.parts) > 0:
            return content.parts[0].text.strip()

        return "Resposta inesperada do modelo."
    except Exception as e:
        return f"Ocorreu um erro ao gerar o plano de estudo: {str(e)}."


@csrf_exempt
def receive_message(request):
    if request.method == "POST":
        from_number = request.POST.get("From")
        incoming_message = request.POST.get("Body", "").strip().lower()

        # Verifica se o usu√°rio j√° est√° cadastrado
        user = Userresponse.objects.filter(phone_number=from_number).first()

        # Se o usu√°rio j√° est√° cadastrado, pergunta se quer responder √† anamnese novamente
        if user:
            if from_number not in current_anamnese_index:
                response = MessagingResponse()
                response.message(
                    "Voc√™ j√° est√° cadastrado! Gostaria de responder √† anamnese novamente? (responda 'sim' ou 'n√£o')"
                )
                current_anamnese_index[from_number] = -1
                return HttpResponse(str(response))

            if current_anamnese_index[from_number] == -1:
                if incoming_message == "sim":
                    response = MessagingResponse()
                    response.message("Ok, vamos reiniciar a anamnese.")
                    current_anamnese_index[from_number] = 0
                    response.message(anamnese_questions[0]["question"])
                    return HttpResponse(str(response))
                elif incoming_message == "n√£o":
                    response = MessagingResponse()
                    response.message("Tudo bem! Se precisar de algo, estou por aqui.")
                    del current_anamnese_index[from_number]
                    return HttpResponse(str(response))
                else:
                    response = MessagingResponse()
                    response.message("Por favor, responda com 'sim' ou 'n√£o'.")
                    return HttpResponse(str(response))

        # Cadastro de um novo usu√°rio
        if not user:
            if from_number not in user_registration:
                user_registration[from_number] = {"step": 0, "data": {}}

            registration_step = user_registration[from_number]["step"]

            if registration_step == 0:
                response = MessagingResponse()
                response.message(
                    "Bem-vindo! Antes de come√ßarmos, por favor, informe seu nome completo:"
                )
                user_registration[from_number]["step"] += 1
                return HttpResponse(str(response))

            elif registration_step == 1:
                user_registration[from_number]["data"]["name"] = incoming_message
                response = MessagingResponse()
                response.message("Agora, por favor, informe seu CPF (somente n√∫meros):")
                user_registration[from_number]["step"] += 1
                return HttpResponse(str(response))

            elif registration_step == 2:
                user_registration[from_number]["data"]["cpf"] = incoming_message
                response = MessagingResponse()
                response.message("Informe seu email:")
                user_registration[from_number]["step"] += 1
                return HttpResponse(str(response))

            elif registration_step == 3:
                user_registration[from_number]["data"]["email"] = incoming_message
                user_data = user_registration[from_number]["data"]

                # Salva o novo usu√°rio no banco de dados
                new_user = Userresponse.objects.create(
                    phone_number=from_number,
                    name=user_data["name"],
                    cpf=user_data["cpf"],
                    email=user_data["email"],
                    responses="",
                )
                new_user.save()

                del user_registration[from_number]  # Limpa o registro

                # Ap√≥s o cadastro, inicia a anamnese
                response = MessagingResponse()
                response.message("Cadastro conclu√≠do! Agora vamos iniciar a anamnese.")
                time.sleep(2)
                current_anamnese_index[from_number] = 0
                response.message(anamnese_questions[0]["question"])
                return HttpResponse(str(response))

        # Respostas do question√°rio
        question_idx = current_anamnese_index.get(from_number, 0)
        if question_idx < len(anamnese_questions):
            valid_answers = anamnese_questions[question_idx]["valid_answers"]
            if incoming_message in valid_answers:
                user.responses = (
                    (user.responses or "")
                    + f"{anamnese_questions[question_idx]['question']} {incoming_message}\n"
                )
                user.save()

                current_anamnese_index[from_number] += 1

                if current_anamnese_index[from_number] < len(anamnese_questions):
                    response = MessagingResponse()
                    response.message(
                        anamnese_questions[current_anamnese_index[from_number]][
                            "question"
                        ]
                    )
                    return HttpResponse(str(response))
                else:
                    response = MessagingResponse()
                    response.message(
                        "Obrigado por responder √† anamnese! Suas respostas foram registradas."
                    )
                    logger.info(f"RESPOSTAS DO USU√ÅRIO ", user.responses)
                    plano_estudo = gerar_plano_estudo_gemini(user.name, user.responses)
                    response.message(
                        f"Seu plano de estudo personalizado:\n{plano_estudo}"
                    )
                    del current_anamnese_index[from_number]
                    return HttpResponse(str(response))
            else:
                response = MessagingResponse()
                response.message(
                    f"Resposta inv√°lida. Por favor, responda com {', '.join(valid_answers)}."
                )
                return HttpResponse(str(response))

    return JsonResponse({"error": "M√©todo n√£o permitido"}, status=405)
